
Namespace: A-H: (REAL 8) I-N: (INTEGER 4) O-Z: (REAL 8)
procedure name = m_strgn
  symtree: 'm_strgn'     || symbol: 'm_strgn'      
    type spec : (UNKNOWN 0)
    attributes: (MODULE )
  symtree: 'strgn1'      || symbol: 'strgn1'       
    type spec : (UNKNOWN 0)
    attributes: (PROCEDURE MODULE-PROC  SUBROUTINE)
    Formal arglist: k1d k2d k3d n3d n2d nop nn2d nn3d natd nmzd jspd ntypsd nmzxyd ntypd nlhd jmtd nmz jspins ntypsy nmzxy ntype nlh jri film zrfs invs2 nvac delz rmt dx namat zatom z1 invtab igrd invs nop2 bmat gmax symor mrot tau mx1 mx2 mx3 nq2 nq3 ngz nk1 nk2 nk3 neq kv2 kv3 sk2 sk3 nstr nstr2 ig2 igz ig rgphs izmin izmax phi2 kimax igfft pgfft kimax2 igfft2 pgfft2 pgft2x pgft2y pgft2xx pgft2yy pgft2xy

  code:
CONTAINS

  Namespace: A-Z: (UNKNOWN 0)
  procedure name = strgn1
    symtree: 'angle'       || symbol: 'angle'        
      type spec : (REAL 8)
      attributes: (PROCEDURE MODULE-PROC  USE-ASSOC(m_angle) FUNCTION ELEMENTAL PURE)
      result: angle
      Formal arglist: x y

    code:
    ASSIGN strgn1:nfftxy (* (* 9 strgn1:k1d) strgn1:k2d)
    DO strgn1:i=1 10 1
      ASSIGN strgn1:name(strgn1:i) strgn1:space(strgn1:i)
    END DO
    INQUIRE FILE='cdn1' EXIST=strgn1:l_cdn1
    IF strgn1:l_cdn1
      DT_END ERR=99 END=99
99    CONTINUE
      CLOSE UNIT=71    ELSE
      ASSIGN strgn1:ordered .true.
    ENDIF
    GOTO 270
10    CONTINUE
    DO  150   strgn1:k2=1 strgn1:nq2 1
      DO  140   strgn1:k3=strgn1:m0 strgn1:mx3 1
        ASSIGN strgn1:s __sqrt_r8[[(((+ (** strgn1:sk2(strgn1:k2) 2) (** (parens (* __convert_i4_r8[[((strgn1:k3))]] strgn1:bmat(3 , 3))) 2))))]]
140     NOP
150   NOP
    CALL sort ((strgn1:nq3) (strgn1:sk3(FULL)) (strgn1:index(FULL)))
    DO  210   strgn1:k=1 strgn1:nq3 1
      IF (= strgn1:kv3(3 , strgn1:k) 0)
        DO  190   strgn1:n=1 strgn1:nop2 1
          ASSIGN strgn1:rgphs(strgn1:kr(1 , strgn1:n) , strgn1:kr(2 , strgn1:n) , strgn1:kr(3 , strgn1:n)) (+ strgn1:rgphs(strgn1:kr(1 , strgn1:n) , strgn1:kr(2 , strgn1:n) , strgn1:kr(3 , strgn1:n)) strgn1:phas(strgn1:n))
190       NOP      ELSE
        DO  200   strgn1:n=1 strgn1:nop 1
          ASSIGN strgn1:new .true.
200       NOP
      ENDIF
210   NOP
    ASSIGN strgn1:kimax (- strgn1:kidx 1)
    

